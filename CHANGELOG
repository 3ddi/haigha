master
=====

Fix message reading in basic.get

Added optional open_cb kwarg to Connection constructor

Added optional callback to basic.consume for notifications when broker has
registered the consumer

Moved channel state out of ChannelClass and into Channel to fix access problems
after Channel has been cleaned up

Added support for Channel open notification listeners



0.4.5
=====

Fix heartbeat support in event transport


0.4.4
=====

Fix handling of socket timeouts in gevent transport


0.4.3
=====

Client sends heartbeat frames on its own rather than simply replying to ones 
received from the broker


0.4.2
=====

Channel close listeners are now notified before channel local data is cleaned
up

Default to the gevent transport

Removed fixed requirements for libevent or gevent. It is now up to the user to
install the packages corresponding to their preferred transport.


0.4.1
=====

Added a write lock around GeventTransport.write() call to socket.sendall()


0.4.0
=====

Fixed handling of channel closures due to error. This cleaned up several DoS
vulnerabilities, including a lockup in the ChannelPool, unbounded memory 
consumption, and failure to re-use channel ids after max id enumerator
rolled over. Channel cleanup relies on reference counting to ensure a client
can respond to rapid opening and closing of channels.

Fixed failure to always cast GeventTransport.read() return to a bytearray,
which caused problems when reading partial frames.

Fixed failure in GeventTransport to switch to non-blocking socket after
connecting.

Fixed fetching of close_info when connection close callback executes.


0.3.4
=====

Abstracted libevent requirement and added support for gevent backend

Support non-blocking connect on libevent transport

Removed connection strategies from Connection and deleted ConnectionStrategy
class. Combined with a simplified and abstracted approach to IO and scheduling
in the Transports, the strategy for failed connections is more deterministic
and left in the hands of the user.


0.3.3
=====

Added cap to ChannelPool. This should be used to ensure that all of the broker
memory is consumed by channels in cases where it is slow to process 
transactions.

0.3.2
=====

Fixed calling into user-provided close callback, changed interface of close_cb
to accept no arguments

Use buffer-per-frame in Connection.send_frame() to work around a memory 
freeing problem in EventSocket

First round of in-depth documentation in DOCUMENTATION.rst

Added callbacks to Exchange.declare(), Exchange.delete() and 
Transaction.select().

Fixed FIFO ordering problems for all methods that support callbacks to user 
after a synchronous operation.


0.3.1
=====

Removed encoding of arrays as table fields


0.3.0
=====

Test coverage of all protocol and frame classes

Test coverage, bug fixes and minor performance improvements to Reader and 
Writer classes

Reader and Writer conform to RabbitMQ and QPid errata as documented
at http://dev.rabbitmq.com/wiki/Amqp091Errata#section_3. Added 
scripts/rabbit_table_test for integration testing.


0.2.3 
=====

First changelog.

Removed manipulation of channels in Connection.disconnect(). It's now
up to the application to manage channels when explicitly shutting down a
connection or when the socket is dropped and the strategy reconnects. This
fixed a problem wherein an application may have created a connection,
created some channels and queued operations on them, but it takes the
strategy a few attempts before completing a socket connection.

Fixed character escpaing when logging outbound ContentFrames.
